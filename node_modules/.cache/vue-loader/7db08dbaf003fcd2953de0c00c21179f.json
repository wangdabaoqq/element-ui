{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input-number/src/input-number.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input-number/src/input-number.vue","mtime":1580567586163},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport ElInput from 'element-ui/packages/input';\nimport Focus from 'element-ui/src/mixins/focus';\nimport RepeatClick from 'element-ui/src/directives/repeat-click';\n\nexport default {\n  name: 'ElInputNumber',\n  mixins: [Focus('input')],\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElInput\n  },\n  props: {\n    step: {\n      type: Number,\n      default: 1\n    },\n    stepStrictly: {\n      type: Boolean,\n      default: false\n    },\n    max: {\n      type: Number,\n      default: Infinity\n    },\n    min: {\n      type: Number,\n      default: -Infinity\n    },\n    value: {},\n    disabled: Boolean,\n    size: String,\n    controls: {\n      type: Boolean,\n      default: true\n    },\n    controlsPosition: {\n      type: String,\n      default: ''\n    },\n    name: String,\n    label: String,\n    placeholder: String,\n    precision: {\n      type: Number,\n      validator(val) {\n        return val >= 0 && val === parseInt(val, 10);\n      }\n    }\n  },\n  data() {\n    return {\n      currentValue: 0,\n      userInput: null\n    };\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler(value) {\n        console.log(value);\n        \n        let newVal = value === undefined ? value : Number(value);\n        if (newVal !== undefined) {\n          if (isNaN(newVal)) {\n            return;\n          }\n\n          if (this.stepStrictly) {\n            const stepPrecision = this.getPrecision(this.step);\n            const precisionFactor = Math.pow(10, stepPrecision);\n            newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;\n          }\n\n          if (this.precision !== undefined) {\n            newVal = this.toPrecision(newVal, this.precision);\n          }\n        }\n        if (newVal >= this.max) newVal = this.max;\n        if (newVal <= this.min) newVal = this.min;\n        this.currentValue = newVal;\n        this.userInput = null;\n        this.$emit('input', newVal);\n      }\n    }\n  },\n  computed: {\n    minDisabled() {\n      return this._decrease(this.value, this.step) < this.min;\n    },\n    maxDisabled() {\n      return this._increase(this.value, this.step) > this.max;\n    },\n    numPrecision() {\n      const { value, step, getPrecision, precision } = this;\n      const stepPrecision = getPrecision(step);\n      if (precision !== undefined) {\n        if (stepPrecision > precision) {\n          console.warn('[Element Warn][InputNumber]precision should not be less than the decimal places of step');\n        }\n        return precision;\n      } else {\n        return Math.max(getPrecision(value), stepPrecision);\n      }\n    },\n    controlsAtRight() {\n      return this.controls && this.controlsPosition === 'right';\n    },\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    inputNumberSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    inputNumberDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    displayValue() {\n      if (this.userInput !== null) {\n        return this.userInput;\n      }\n\n      let currentValue = this.currentValue;\n\n      if (typeof currentValue === 'number') {\n        if (this.stepStrictly) {\n          const stepPrecision = this.getPrecision(this.step);\n          const precisionFactor = Math.pow(10, stepPrecision);\n          currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;\n        }\n\n        if (this.precision !== undefined) {\n          currentValue = currentValue.toFixed(this.precision);\n        }\n      }\n\n      return currentValue;\n    }\n  },\n  methods: {\n    toPrecision(num, precision) {\n      if (precision === undefined) precision = this.numPrecision;\n      return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));\n    },\n    getPrecision(value) {\n      if (value === undefined) return 0;\n      const valueString = value.toString();\n      const dotPosition = valueString.indexOf('.');\n      let precision = 0;\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n      return precision;\n    },\n    _increase(val, step) {\n      console.log(val, step, this.numPrecision)\n      if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n      const precisionFactor = Math.pow(10, this.numPrecision);\n      console.log(precisionFactor)\n      // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n      return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);\n    },\n    _decrease(val, step) {\n      if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n      const precisionFactor = Math.pow(10, this.numPrecision);\n\n      return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);\n    },\n    increase() {\n      console.log(this)\n      if (this.inputNumberDisabled || this.maxDisabled) return;\n      const value = this.value || 0;\n      const newVal = this._increase(value, this.step);\n      this.setCurrentValue(newVal);\n    },\n    decrease() {\n      // console.log(this.value)\n      console.log(this.minDisabled)\n      if (this.inputNumberDisabled || this.minDisabled) return;\n      const value = this.value || 0;\n      const newVal = this._decrease(value, this.step);\n      // console.log(newVal)\n      this.setCurrentValue(newVal);\n    },\n    handleBlur(event) {\n      this.$emit('blur', event);\n    },\n    handleFocus(event) {\n      this.$emit('focus', event);\n    },\n    setCurrentValue(newVal) {\n      console.log(newVal, this.precision)\n      const oldVal = this.currentValue;\n      if (typeof newVal === 'number' && this.precision !== undefined) {\n        newVal = this.toPrecision(newVal, this.precision);\n      }\n      if (newVal >= this.max) newVal = this.max;\n      if (newVal <= this.min) newVal = this.min;\n      if (oldVal === newVal) return;\n      this.userInput = null;\n      this.$emit('input', newVal);\n      this.$emit('change', newVal, oldVal);\n      this.currentValue = newVal;\n    },\n    handleInput(value) {\n      this.userInput = value;\n    },\n    handleInputChange(value) {\n      const newVal = value === '' ? undefined : Number(value);\n      console.log(Number(value))\n      if (!isNaN(newVal) || value === '') {\n        this.setCurrentValue(newVal);\n      }\n      this.userInput = null;\n    },\n    select() {\n      this.$refs.input.select();\n    }\n  },\n  mounted() {\n    let innerInput = this.$refs.input.$refs.input;\n    innerInput.setAttribute('role', 'spinbutton');\n    innerInput.setAttribute('aria-valuemax', this.max);\n    innerInput.setAttribute('aria-valuemin', this.min);\n    innerInput.setAttribute('aria-valuenow', this.currentValue);\n    innerInput.setAttribute('aria-disabled', this.inputNumberDisabled);\n  },\n  updated() {\n    if (!this.$refs || !this.$refs.input) return;\n    const innerInput = this.$refs.input.$refs.input;\n    innerInput.setAttribute('aria-valuenow', this.currentValue);\n  }\n};\n",{"version":3,"sources":["input-number.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"input-number.vue","sourceRoot":"node_modules/element-ui/packages/input-number/src","sourcesContent":["<template>\n  <div\n     @dragstart.prevent\n    :class=\"[\n      'el-input-number',\n      inputNumberSize ? 'el-input-number--' + inputNumberSize : '',\n      { 'is-disabled': inputNumberDisabled },\n      { 'is-without-controls': !controls },\n      { 'is-controls-right': controlsAtRight }\n    ]\">\n    <span\n      class=\"el-input-number__decrease\"\n      role=\"button\"\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      :class=\"{'is-disabled': minDisabled}\"\n      @keydown.enter=\"decrease\">\n      <i :class=\"`el-icon-${controlsAtRight ? 'arrow-down' : 'minus'}`\"></i>\n    </span>\n    <span\n      class=\"el-input-number__increase\"\n      role=\"button\"\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      :class=\"{'is-disabled': maxDisabled}\"\n      @keydown.enter=\"increase\">\n      <i :class=\"`el-icon-${controlsAtRight ? 'arrow-up' : 'plus'}`\"></i>\n    </span>\n    <el-input\n      ref=\"input\"\n      :value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      @keydown.up.native.prevent=\"increase\"\n      @keydown.down.native.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\">\n    </el-input>\n  </div>\n</template>\n<script>\n  import ElInput from 'element-ui/packages/input';\n  import Focus from 'element-ui/src/mixins/focus';\n  import RepeatClick from 'element-ui/src/directives/repeat-click';\n\n  export default {\n    name: 'ElInputNumber',\n    mixins: [Focus('input')],\n    inject: {\n      elForm: {\n        default: ''\n      },\n      elFormItem: {\n        default: ''\n      }\n    },\n    directives: {\n      repeatClick: RepeatClick\n    },\n    components: {\n      ElInput\n    },\n    props: {\n      step: {\n        type: Number,\n        default: 1\n      },\n      stepStrictly: {\n        type: Boolean,\n        default: false\n      },\n      max: {\n        type: Number,\n        default: Infinity\n      },\n      min: {\n        type: Number,\n        default: -Infinity\n      },\n      value: {},\n      disabled: Boolean,\n      size: String,\n      controls: {\n        type: Boolean,\n        default: true\n      },\n      controlsPosition: {\n        type: String,\n        default: ''\n      },\n      name: String,\n      label: String,\n      placeholder: String,\n      precision: {\n        type: Number,\n        validator(val) {\n          return val >= 0 && val === parseInt(val, 10);\n        }\n      }\n    },\n    data() {\n      return {\n        currentValue: 0,\n        userInput: null\n      };\n    },\n    watch: {\n      value: {\n        immediate: true,\n        handler(value) {\n          console.log(value);\n          \n          let newVal = value === undefined ? value : Number(value);\n          if (newVal !== undefined) {\n            if (isNaN(newVal)) {\n              return;\n            }\n\n            if (this.stepStrictly) {\n              const stepPrecision = this.getPrecision(this.step);\n              const precisionFactor = Math.pow(10, stepPrecision);\n              newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;\n            }\n\n            if (this.precision !== undefined) {\n              newVal = this.toPrecision(newVal, this.precision);\n            }\n          }\n          if (newVal >= this.max) newVal = this.max;\n          if (newVal <= this.min) newVal = this.min;\n          this.currentValue = newVal;\n          this.userInput = null;\n          this.$emit('input', newVal);\n        }\n      }\n    },\n    computed: {\n      minDisabled() {\n        return this._decrease(this.value, this.step) < this.min;\n      },\n      maxDisabled() {\n        return this._increase(this.value, this.step) > this.max;\n      },\n      numPrecision() {\n        const { value, step, getPrecision, precision } = this;\n        const stepPrecision = getPrecision(step);\n        if (precision !== undefined) {\n          if (stepPrecision > precision) {\n            console.warn('[Element Warn][InputNumber]precision should not be less than the decimal places of step');\n          }\n          return precision;\n        } else {\n          return Math.max(getPrecision(value), stepPrecision);\n        }\n      },\n      controlsAtRight() {\n        return this.controls && this.controlsPosition === 'right';\n      },\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n      inputNumberSize() {\n        return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      },\n      inputNumberDisabled() {\n        return this.disabled || (this.elForm || {}).disabled;\n      },\n      displayValue() {\n        if (this.userInput !== null) {\n          return this.userInput;\n        }\n\n        let currentValue = this.currentValue;\n\n        if (typeof currentValue === 'number') {\n          if (this.stepStrictly) {\n            const stepPrecision = this.getPrecision(this.step);\n            const precisionFactor = Math.pow(10, stepPrecision);\n            currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;\n          }\n\n          if (this.precision !== undefined) {\n            currentValue = currentValue.toFixed(this.precision);\n          }\n        }\n\n        return currentValue;\n      }\n    },\n    methods: {\n      toPrecision(num, precision) {\n        if (precision === undefined) precision = this.numPrecision;\n        return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));\n      },\n      getPrecision(value) {\n        if (value === undefined) return 0;\n        const valueString = value.toString();\n        const dotPosition = valueString.indexOf('.');\n        let precision = 0;\n        if (dotPosition !== -1) {\n          precision = valueString.length - dotPosition - 1;\n        }\n        return precision;\n      },\n      _increase(val, step) {\n        console.log(val, step, this.numPrecision)\n        if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n        const precisionFactor = Math.pow(10, this.numPrecision);\n        console.log(precisionFactor)\n        // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n        return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);\n      },\n      _decrease(val, step) {\n        if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n        const precisionFactor = Math.pow(10, this.numPrecision);\n\n        return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);\n      },\n      increase() {\n        console.log(this)\n        if (this.inputNumberDisabled || this.maxDisabled) return;\n        const value = this.value || 0;\n        const newVal = this._increase(value, this.step);\n        this.setCurrentValue(newVal);\n      },\n      decrease() {\n        // console.log(this.value)\n        console.log(this.minDisabled)\n        if (this.inputNumberDisabled || this.minDisabled) return;\n        const value = this.value || 0;\n        const newVal = this._decrease(value, this.step);\n        // console.log(newVal)\n        this.setCurrentValue(newVal);\n      },\n      handleBlur(event) {\n        this.$emit('blur', event);\n      },\n      handleFocus(event) {\n        this.$emit('focus', event);\n      },\n      setCurrentValue(newVal) {\n        console.log(newVal, this.precision)\n        const oldVal = this.currentValue;\n        if (typeof newVal === 'number' && this.precision !== undefined) {\n          newVal = this.toPrecision(newVal, this.precision);\n        }\n        if (newVal >= this.max) newVal = this.max;\n        if (newVal <= this.min) newVal = this.min;\n        if (oldVal === newVal) return;\n        this.userInput = null;\n        this.$emit('input', newVal);\n        this.$emit('change', newVal, oldVal);\n        this.currentValue = newVal;\n      },\n      handleInput(value) {\n        this.userInput = value;\n      },\n      handleInputChange(value) {\n        const newVal = value === '' ? undefined : Number(value);\n        console.log(Number(value))\n        if (!isNaN(newVal) || value === '') {\n          this.setCurrentValue(newVal);\n        }\n        this.userInput = null;\n      },\n      select() {\n        this.$refs.input.select();\n      }\n    },\n    mounted() {\n      let innerInput = this.$refs.input.$refs.input;\n      innerInput.setAttribute('role', 'spinbutton');\n      innerInput.setAttribute('aria-valuemax', this.max);\n      innerInput.setAttribute('aria-valuemin', this.min);\n      innerInput.setAttribute('aria-valuenow', this.currentValue);\n      innerInput.setAttribute('aria-disabled', this.inputNumberDisabled);\n    },\n    updated() {\n      if (!this.$refs || !this.$refs.input) return;\n      const innerInput = this.$refs.input.$refs.input;\n      innerInput.setAttribute('aria-valuenow', this.currentValue);\n    }\n  };\n</script>\n"]}]}