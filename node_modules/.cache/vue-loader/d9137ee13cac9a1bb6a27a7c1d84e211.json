{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/src/components/setList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/src/components/setList.vue","mtime":1579170252885},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\n const keyCode = Object.freeze({\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n  });\nexport default {\n    name: 'ElRadioGroup',\n\n    componentName: 'ElRadioGroup',\n\n    inject: {\n      elFormItem: {\n        default: ''\n      }\n    },\n\n    // mixins: [Emitter],\n\n    props: {\n      value: {},\n      size: String,\n      fill: String,\n      textColor: String,\n      disabled: Boolean\n    },\n\n    computed: {\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n      _elTag() {\n        return (this.$vnode.data || {}).tag || 'div';\n      },\n      radioGroupSize() {\n        return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      }\n    },\n\n    created() {\n      this.$on('handleChange', value => {\n        // console.log(124111)\n        this.$emit('change', value);\n      });\n    },\n    mounted() {\n      // 当radioGroup没有默认选项时，第一个可以选中Tab导航\n      const radios = this.$el.querySelectorAll('[type=radio]');\n      const firstLabel = this.$el.querySelectorAll('[role=radio]')[0];\n      if (![].some.call(radios, radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    },\n    methods: {\n      handleKeydown(e) { // 左右上下按键 可以在radio组内切换不同选项\n        const target = e.target;\n        const className = target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]';\n        const radios = this.$el.querySelectorAll(className);\n        const length = radios.length;\n        const index = [].indexOf.call(radios, target);\n        const roleRadios = this.$el.querySelectorAll('[role=radio]');\n        switch (e.keyCode) {\n          case keyCode.LEFT:\n          case keyCode.UP:\n            e.stopPropagation();\n            e.preventDefault();\n            if (index === 0) {\n              roleRadios[length - 1].click();\n              roleRadios[length - 1].focus();\n            } else {\n              roleRadios[index - 1].click();\n              roleRadios[index - 1].focus();\n            }\n            break;\n          case keyCode.RIGHT:\n          case keyCode.DOWN:\n            if (index === (length - 1)) {\n              e.stopPropagation();\n              e.preventDefault();\n              roleRadios[0].click();\n              roleRadios[0].focus();\n            } else {\n              roleRadios[index + 1].click();\n              roleRadios[index + 1].focus();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    watch: {\n      value() {\n        this.dispatch('ElFormItem', 'el.form.change', [this.value]);\n      }\n    }\n  };\n",{"version":3,"sources":["setList.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"setList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <slot></slot>\n    <a></a>\n  </div>\n</template>\n<script>\n const keyCode = Object.freeze({\n    LEFT: 37,\n    UP: 38,\n    RIGHT: 39,\n    DOWN: 40\n  });\nexport default {\n    name: 'ElRadioGroup',\n\n    componentName: 'ElRadioGroup',\n\n    inject: {\n      elFormItem: {\n        default: ''\n      }\n    },\n\n    // mixins: [Emitter],\n\n    props: {\n      value: {},\n      size: String,\n      fill: String,\n      textColor: String,\n      disabled: Boolean\n    },\n\n    computed: {\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n      _elTag() {\n        return (this.$vnode.data || {}).tag || 'div';\n      },\n      radioGroupSize() {\n        return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      }\n    },\n\n    created() {\n      this.$on('handleChange', value => {\n        // console.log(124111)\n        this.$emit('change', value);\n      });\n    },\n    mounted() {\n      // 当radioGroup没有默认选项时，第一个可以选中Tab导航\n      const radios = this.$el.querySelectorAll('[type=radio]');\n      const firstLabel = this.$el.querySelectorAll('[role=radio]')[0];\n      if (![].some.call(radios, radio => radio.checked) && firstLabel) {\n        firstLabel.tabIndex = 0;\n      }\n    },\n    methods: {\n      handleKeydown(e) { // 左右上下按键 可以在radio组内切换不同选项\n        const target = e.target;\n        const className = target.nodeName === 'INPUT' ? '[type=radio]' : '[role=radio]';\n        const radios = this.$el.querySelectorAll(className);\n        const length = radios.length;\n        const index = [].indexOf.call(radios, target);\n        const roleRadios = this.$el.querySelectorAll('[role=radio]');\n        switch (e.keyCode) {\n          case keyCode.LEFT:\n          case keyCode.UP:\n            e.stopPropagation();\n            e.preventDefault();\n            if (index === 0) {\n              roleRadios[length - 1].click();\n              roleRadios[length - 1].focus();\n            } else {\n              roleRadios[index - 1].click();\n              roleRadios[index - 1].focus();\n            }\n            break;\n          case keyCode.RIGHT:\n          case keyCode.DOWN:\n            if (index === (length - 1)) {\n              e.stopPropagation();\n              e.preventDefault();\n              roleRadios[0].click();\n              roleRadios[0].focus();\n            } else {\n              roleRadios[index + 1].click();\n              roleRadios[index + 1].focus();\n            }\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    watch: {\n      value() {\n        this.dispatch('ElFormItem', 'el.form.change', [this.value]);\n      }\n    }\n  };\n</script>\n\n<style>\n\n</style>\n"]}]}