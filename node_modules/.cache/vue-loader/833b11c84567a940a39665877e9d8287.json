{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input/src/input.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input/src/input.vue","mtime":1580138358912},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport emitter from 'element-ui/src/mixins/emitter';\nimport Migrating from 'element-ui/src/mixins/migrating';\nimport calcTextareaHeight from './calcTextareaHeight';\nimport merge from 'element-ui/src/utils/merge';\nimport {isKorean} from 'element-ui/src/utils/shared';\n\nexport default {\n  name: 'ElInput',\n\n  componentName: 'ElInput',\n\n  mixins: [emitter, Migrating],\n\n  inheritAttrs: false,\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  data() {\n    return {\n      textareaCalcStyle: {},\n      hovering: false,\n      focused: false,\n      isComposing: false,\n      passwordVisible: false\n    };\n  },\n\n  props: {\n    value: [String, Number],\n    size: String,\n    resize: String,\n    form: String,\n    disabled: Boolean,\n    readonly: Boolean,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    autosize: {\n      type: [Boolean, Object],\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n    /** @Deprecated in next major version */\n    autoComplete: {\n      type: String,\n      validator(val) {\n        process.env.NODE_ENV !== 'production' &&\n          console.warn('[Element Warn][Input]\\'auto-complete\\' property will be deprecated in next major version. please use \\'autocomplete\\' instead.');\n        return true;\n      }\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    },\n    suffixIcon: String,\n    prefixIcon: String,\n    label: String,\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    showPassword: {\n      type: Boolean,\n      default: false\n    },\n    showWordLimit: {\n      type: Boolean,\n      default: false\n    },\n    tabindex: String\n  },\n\n  computed: {\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    validateState() {\n      return this.elFormItem ? this.elFormItem.validateState : '';\n    },\n    needStatusIcon() {\n      return this.elForm ? this.elForm.statusIcon : false;\n    },\n    validateIcon() {\n      return {\n        validating: 'el-icon-loading',\n        success: 'el-icon-circle-check',\n        error: 'el-icon-circle-close'\n      }[this.validateState];\n    },\n    textareaStyle() {\n      return merge({}, this.textareaCalcStyle, { resize: this.resize });\n    },\n    inputSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    inputDisabled() {\n      console.log(this.$attrs)\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    nativeInputValue() {\n      return this.value === null || this.value === undefined ? '' : String(this.value);\n    },\n    showClear() {\n      return this.clearable &&\n        !this.inputDisabled &&\n        !this.readonly &&\n        this.nativeInputValue &&\n        (this.focused || this.hovering);\n    },\n    showPwdVisible() {\n      return this.showPassword &&\n        !this.inputDisabled &&\n        !this.readonly &&\n        (!!this.nativeInputValue || this.focused);\n    },\n    isWordLimitVisible() {\n      return this.showWordLimit &&\n        this.$attrs.maxlength &&\n        (this.type === 'text' || this.type === 'textarea') &&\n        !this.inputDisabled &&\n        !this.readonly &&\n        !this.showPassword;\n    },\n    upperLimit() {\n      return this.$attrs.maxlength;\n    },\n    textLength() {\n      if (typeof this.value === 'number') {\n        return String(this.value).length;\n      }\n\n      return (this.value || '').length;\n    },\n    inputExceed() {\n      // show exceed style if length of initial value greater then maxlength\n      return this.isWordLimitVisible &&\n        (this.textLength > this.upperLimit);\n    }\n  },\n\n  watch: {\n    value(val) {\n      this.$nextTick(this.resizeTextarea);\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.change', [val]);\n      }\n    },\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    nativeInputValue() {\n      this.setNativeInputValue();\n    },\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    type() {\n      this.$nextTick(() => {\n        this.setNativeInputValue();\n        this.resizeTextarea();\n        this.updateIconOffset();\n      });\n    }\n  },\n\n  methods: {\n    focus() {\n      this.getInput().focus();\n    },\n    blur() {\n      this.getInput().blur();\n    },\n    getMigratingConfig() {\n      return {\n        props: {\n          'icon': 'icon is removed, use suffix-icon / prefix-icon instead.',\n          'on-icon-click': 'on-icon-click is removed.'\n        },\n        events: {\n          'click': 'click is removed.'\n        }\n      };\n    },\n    handleBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.blur', [this.value]);\n      }\n    },\n    select() {\n      this.getInput().select();\n    },\n    resizeTextarea() {\n      if (this.$isServer) return;\n      const { autosize, type } = this;\n      if (type !== 'textarea') return;\n      if (!autosize) {\n        this.textareaCalcStyle = {\n          minHeight: calcTextareaHeight(this.$refs.textarea).minHeight\n        };\n        return;\n      }\n      const minRows = autosize.minRows;\n      const maxRows = autosize.maxRows;\n\n      this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n    },\n    setNativeInputValue() {\n      const input = this.getInput();\n      if (!input) return;\n      if (input.value === this.nativeInputValue) return;\n      input.value = this.nativeInputValue;\n    },\n    handleFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    handleCompositionStart() {\n      this.isComposing = true;\n    },\n    handleCompositionUpdate(event) {\n      const text = event.target.value;\n      const lastCharacter = text[text.length - 1] || '';\n      this.isComposing = !isKorean(lastCharacter);\n    },\n    handleCompositionEnd(event) {\n      if (this.isComposing) {\n        this.isComposing = false;\n        this.handleInput(event);\n      }\n    },\n    handleInput(event) {\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (this.isComposing) return;\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (event.target.value === this.nativeInputValue) return;\n\n      this.$emit('input', event.target.value);\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      this.$nextTick(this.setNativeInputValue);\n    },\n    handleChange(event) {\n      this.$emit('change', event.target.value);\n    },\n    calcIconOffset(place) {\n      let elList = [].slice.call(this.$el.querySelectorAll(`.el-input__${place}`) || []);\n      if (!elList.length) return;\n      let el = null;\n      for (let i = 0; i < elList.length; i++) {\n        if (elList[i].parentNode === this.$el) {\n          el = elList[i];\n          break;\n        }\n      }\n      if (!el) return;\n      const pendantMap = {\n        suffix: 'append',\n        prefix: 'prepend'\n      };\n\n      const pendant = pendantMap[place];\n      if (this.$slots[pendant]) {\n        el.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${this.$el.querySelector(`.el-input-group__${pendant}`).offsetWidth}px)`;\n      } else {\n        el.removeAttribute('style');\n      }\n    },\n    updateIconOffset() {\n      this.calcIconOffset('prefix');\n      this.calcIconOffset('suffix');\n    },\n    clear() {\n      this.$emit('input', '');\n      this.$emit('change', '');\n      this.$emit('clear');\n    },\n    handlePasswordVisible() {\n      this.passwordVisible = !this.passwordVisible;\n      this.focus();\n    },\n    getInput() {\n      return this.$refs.input || this.$refs.textarea;\n    },\n    getSuffixVisible() {\n      return this.$slots.suffix ||\n        this.suffixIcon ||\n        this.showClear ||\n        this.showPassword ||\n        this.isWordLimitVisible ||\n        (this.validateState && this.needStatusIcon);\n    }\n  },\n\n  created() {\n    this.$on('inputSelect', this.select);\n  },\n\n  mounted() {\n    this.setNativeInputValue();\n    this.resizeTextarea();\n    this.updateIconOffset();\n  },\n\n  updated() {\n    this.$nextTick(this.updateIconOffset);\n  }\n};\n",{"version":3,"sources":["input.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"input.vue","sourceRoot":"node_modules/element-ui/packages/input/src","sourcesContent":["<template>\n  <div :class=\"[\n    type === 'textarea' ? 'el-textarea' : 'el-input',\n    inputSize ? 'el-input--' + inputSize : '',\n    {\n      'is-disabled': inputDisabled,\n      'is-exceed': inputExceed,\n      'el-input-group': $slots.prepend || $slots.append,\n      'el-input-group--append': $slots.append,\n      'el-input-group--prepend': $slots.prepend,\n      'el-input--prefix': $slots.prefix || prefixIcon,\n      'el-input--suffix': $slots.suffix || suffixIcon || clearable || showPassword\n    }\n    ]\"\n    @mouseenter=\"hovering = true\"\n    @mouseleave=\"hovering = false\"\n  >\n    <template v-if=\"type !== 'textarea'\">\n      <!-- 前置元素 -->\n      <div class=\"el-input-group__prepend\" v-if=\"$slots.prepend\">\n        <slot name=\"prepend\"></slot>\n      </div>\n      <input\n        :tabindex=\"tabindex\"\n        v-if=\"type !== 'textarea'\"\n        class=\"el-input__inner\"\n        v-bind=\"$attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text': 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autoComplete || autocomplete\"\n        ref=\"input\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        :aria-label=\"label\"\n      >\n      <!-- 前置内容 -->\n      <span class=\"el-input__prefix\" v-if=\"$slots.prefix || prefixIcon\">\n        <slot name=\"prefix\"></slot>\n        <i class=\"el-input__icon\"\n           v-if=\"prefixIcon\"\n           :class=\"prefixIcon\">\n        </i>\n      </span>\n      <!-- 后置内容 -->\n      <span\n        class=\"el-input__suffix\"\n        v-if=\"getSuffixVisible()\">\n        <span class=\"el-input__suffix-inner\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <i class=\"el-input__icon\"\n              v-if=\"suffixIcon\"\n              :class=\"suffixIcon\">\n            </i>\n          </template>\n          <i v-if=\"showClear\"\n            class=\"el-input__icon el-icon-circle-close el-input__clear\"\n            @mousedown.prevent\n            @click=\"clear\"\n          ></i>\n          <i v-if=\"showPwdVisible\"\n            class=\"el-input__icon el-icon-view el-input__clear\"\n            @click=\"handlePasswordVisible\"\n          ></i>\n          <span v-if=\"isWordLimitVisible\" class=\"el-input__count\">\n            <span class=\"el-input__count-inner\">\n              {{ textLength }}/{{ upperLimit }}\n            </span>\n          </span>\n        </span>\n        <i class=\"el-input__icon\"\n          v-if=\"validateState\"\n          :class=\"['el-input__validateIcon', validateIcon]\">\n        </i>\n      </span>\n      <!-- 后置元素 -->\n      <div class=\"el-input-group__append\" v-if=\"$slots.append\">\n        <slot name=\"append\"></slot>\n      </div>\n    </template>\n    <textarea\n      v-else\n      :tabindex=\"tabindex\"\n      class=\"el-textarea__inner\"\n      @compositionstart=\"handleCompositionStart\"\n      @compositionupdate=\"handleCompositionUpdate\"\n      @compositionend=\"handleCompositionEnd\"\n      @input=\"handleInput\"\n      ref=\"textarea\"\n      v-bind=\"$attrs\"\n      :disabled=\"inputDisabled\"\n      :readonly=\"readonly\"\n      :autocomplete=\"autoComplete || autocomplete\"\n      :style=\"textareaStyle\"\n      @focus=\"handleFocus\"\n      @blur=\"handleBlur\"\n      @change=\"handleChange\"\n      :aria-label=\"label\"\n    >\n    </textarea>\n    <span v-if=\"isWordLimitVisible && type === 'textarea'\" class=\"el-input__count\">{{ textLength }}/{{ upperLimit }}</span>\n  </div>\n</template>\n<script>\n  import emitter from 'element-ui/src/mixins/emitter';\n  import Migrating from 'element-ui/src/mixins/migrating';\n  import calcTextareaHeight from './calcTextareaHeight';\n  import merge from 'element-ui/src/utils/merge';\n  import {isKorean} from 'element-ui/src/utils/shared';\n\n  export default {\n    name: 'ElInput',\n\n    componentName: 'ElInput',\n\n    mixins: [emitter, Migrating],\n\n    inheritAttrs: false,\n\n    inject: {\n      elForm: {\n        default: ''\n      },\n      elFormItem: {\n        default: ''\n      }\n    },\n\n    data() {\n      return {\n        textareaCalcStyle: {},\n        hovering: false,\n        focused: false,\n        isComposing: false,\n        passwordVisible: false\n      };\n    },\n\n    props: {\n      value: [String, Number],\n      size: String,\n      resize: String,\n      form: String,\n      disabled: Boolean,\n      readonly: Boolean,\n      type: {\n        type: String,\n        default: 'text'\n      },\n      autosize: {\n        type: [Boolean, Object],\n        default: false\n      },\n      autocomplete: {\n        type: String,\n        default: 'off'\n      },\n      /** @Deprecated in next major version */\n      autoComplete: {\n        type: String,\n        validator(val) {\n          process.env.NODE_ENV !== 'production' &&\n            console.warn('[Element Warn][Input]\\'auto-complete\\' property will be deprecated in next major version. please use \\'autocomplete\\' instead.');\n          return true;\n        }\n      },\n      validateEvent: {\n        type: Boolean,\n        default: true\n      },\n      suffixIcon: String,\n      prefixIcon: String,\n      label: String,\n      clearable: {\n        type: Boolean,\n        default: false\n      },\n      showPassword: {\n        type: Boolean,\n        default: false\n      },\n      showWordLimit: {\n        type: Boolean,\n        default: false\n      },\n      tabindex: String\n    },\n\n    computed: {\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n      validateState() {\n        return this.elFormItem ? this.elFormItem.validateState : '';\n      },\n      needStatusIcon() {\n        return this.elForm ? this.elForm.statusIcon : false;\n      },\n      validateIcon() {\n        return {\n          validating: 'el-icon-loading',\n          success: 'el-icon-circle-check',\n          error: 'el-icon-circle-close'\n        }[this.validateState];\n      },\n      textareaStyle() {\n        return merge({}, this.textareaCalcStyle, { resize: this.resize });\n      },\n      inputSize() {\n        return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      },\n      inputDisabled() {\n        console.log(this.$attrs)\n        return this.disabled || (this.elForm || {}).disabled;\n      },\n      nativeInputValue() {\n        return this.value === null || this.value === undefined ? '' : String(this.value);\n      },\n      showClear() {\n        return this.clearable &&\n          !this.inputDisabled &&\n          !this.readonly &&\n          this.nativeInputValue &&\n          (this.focused || this.hovering);\n      },\n      showPwdVisible() {\n        return this.showPassword &&\n          !this.inputDisabled &&\n          !this.readonly &&\n          (!!this.nativeInputValue || this.focused);\n      },\n      isWordLimitVisible() {\n        return this.showWordLimit &&\n          this.$attrs.maxlength &&\n          (this.type === 'text' || this.type === 'textarea') &&\n          !this.inputDisabled &&\n          !this.readonly &&\n          !this.showPassword;\n      },\n      upperLimit() {\n        return this.$attrs.maxlength;\n      },\n      textLength() {\n        if (typeof this.value === 'number') {\n          return String(this.value).length;\n        }\n\n        return (this.value || '').length;\n      },\n      inputExceed() {\n        // show exceed style if length of initial value greater then maxlength\n        return this.isWordLimitVisible &&\n          (this.textLength > this.upperLimit);\n      }\n    },\n\n    watch: {\n      value(val) {\n        this.$nextTick(this.resizeTextarea);\n        if (this.validateEvent) {\n          this.dispatch('ElFormItem', 'el.form.change', [val]);\n        }\n      },\n      // native input value is set explicitly\n      // do not use v-model / :value in template\n      // see: https://github.com/ElemeFE/element/issues/14521\n      nativeInputValue() {\n        this.setNativeInputValue();\n      },\n      // when change between <input> and <textarea>,\n      // update DOM dependent value and styles\n      // https://github.com/ElemeFE/element/issues/14857\n      type() {\n        this.$nextTick(() => {\n          this.setNativeInputValue();\n          this.resizeTextarea();\n          this.updateIconOffset();\n        });\n      }\n    },\n\n    methods: {\n      focus() {\n        this.getInput().focus();\n      },\n      blur() {\n        this.getInput().blur();\n      },\n      getMigratingConfig() {\n        return {\n          props: {\n            'icon': 'icon is removed, use suffix-icon / prefix-icon instead.',\n            'on-icon-click': 'on-icon-click is removed.'\n          },\n          events: {\n            'click': 'click is removed.'\n          }\n        };\n      },\n      handleBlur(event) {\n        this.focused = false;\n        this.$emit('blur', event);\n        if (this.validateEvent) {\n          this.dispatch('ElFormItem', 'el.form.blur', [this.value]);\n        }\n      },\n      select() {\n        this.getInput().select();\n      },\n      resizeTextarea() {\n        if (this.$isServer) return;\n        const { autosize, type } = this;\n        if (type !== 'textarea') return;\n        if (!autosize) {\n          this.textareaCalcStyle = {\n            minHeight: calcTextareaHeight(this.$refs.textarea).minHeight\n          };\n          return;\n        }\n        const minRows = autosize.minRows;\n        const maxRows = autosize.maxRows;\n\n        this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n      },\n      setNativeInputValue() {\n        const input = this.getInput();\n        if (!input) return;\n        if (input.value === this.nativeInputValue) return;\n        input.value = this.nativeInputValue;\n      },\n      handleFocus(event) {\n        this.focused = true;\n        this.$emit('focus', event);\n      },\n      handleCompositionStart() {\n        this.isComposing = true;\n      },\n      handleCompositionUpdate(event) {\n        const text = event.target.value;\n        const lastCharacter = text[text.length - 1] || '';\n        this.isComposing = !isKorean(lastCharacter);\n      },\n      handleCompositionEnd(event) {\n        if (this.isComposing) {\n          this.isComposing = false;\n          this.handleInput(event);\n        }\n      },\n      handleInput(event) {\n        // should not emit input during composition\n        // see: https://github.com/ElemeFE/element/issues/10516\n        if (this.isComposing) return;\n\n        // hack for https://github.com/ElemeFE/element/issues/8548\n        // should remove the following line when we don't support IE\n        if (event.target.value === this.nativeInputValue) return;\n\n        this.$emit('input', event.target.value);\n\n        // ensure native input value is controlled\n        // see: https://github.com/ElemeFE/element/issues/12850\n        this.$nextTick(this.setNativeInputValue);\n      },\n      handleChange(event) {\n        this.$emit('change', event.target.value);\n      },\n      calcIconOffset(place) {\n        let elList = [].slice.call(this.$el.querySelectorAll(`.el-input__${place}`) || []);\n        if (!elList.length) return;\n        let el = null;\n        for (let i = 0; i < elList.length; i++) {\n          if (elList[i].parentNode === this.$el) {\n            el = elList[i];\n            break;\n          }\n        }\n        if (!el) return;\n        const pendantMap = {\n          suffix: 'append',\n          prefix: 'prepend'\n        };\n\n        const pendant = pendantMap[place];\n        if (this.$slots[pendant]) {\n          el.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${this.$el.querySelector(`.el-input-group__${pendant}`).offsetWidth}px)`;\n        } else {\n          el.removeAttribute('style');\n        }\n      },\n      updateIconOffset() {\n        this.calcIconOffset('prefix');\n        this.calcIconOffset('suffix');\n      },\n      clear() {\n        this.$emit('input', '');\n        this.$emit('change', '');\n        this.$emit('clear');\n      },\n      handlePasswordVisible() {\n        this.passwordVisible = !this.passwordVisible;\n        this.focus();\n      },\n      getInput() {\n        return this.$refs.input || this.$refs.textarea;\n      },\n      getSuffixVisible() {\n        return this.$slots.suffix ||\n          this.suffixIcon ||\n          this.showClear ||\n          this.showPassword ||\n          this.isWordLimitVisible ||\n          (this.validateState && this.needStatusIcon);\n      }\n    },\n\n    created() {\n      this.$on('inputSelect', this.select);\n    },\n\n    mounted() {\n      this.setNativeInputValue();\n      this.resizeTextarea();\n      this.updateIconOffset();\n    },\n\n    updated() {\n      this.$nextTick(this.updateIconOffset);\n    }\n  };\n</script>\n"]}]}