{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/checkbox/src/checkbox-button.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/checkbox/src/checkbox-button.vue","mtime":1579317832768},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Emitter from 'element-ui/src/mixins/emitter';\n\nexport default {\n  name: 'ElCheckboxButton',\n\n  mixins: [Emitter],\n\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n\n  data() {\n    return {\n      selfModel: false,\n      focus: false,\n      isLimitExceeded: false\n    };\n  },\n\n  props: {\n    value: {},\n    label: {},\n    disabled: Boolean,\n    checked: Boolean,\n    name: String,\n    trueLabel: [String, Number],\n    falseLabel: [String, Number]\n  },\n  computed: {\n    model: {\n      get() {\n        // console.log(this.value, this.selfModel)\n        return this._checkboxGroup\n          ? this.store : this.value !== undefined\n            ? this.value : this.selfModel;\n      },\n\n      set(val) {\n        // console.log(val)\n        if (this._checkboxGroup) {\n          this.isLimitExceeded = false;\n          (this._checkboxGroup.min !== undefined &&\n            val.length < this._checkboxGroup.min &&\n            (this.isLimitExceeded = true));\n\n          (this._checkboxGroup.max !== undefined &&\n            val.length > this._checkboxGroup.max &&\n            (this.isLimitExceeded = true));\n\n          this.isLimitExceeded === false &&\n          this.dispatch('ElCheckboxGroup', 'input', [val]);\n        } else if (this.value !== undefined) {\n          this.$emit('input', val);\n        } else {\n          // console.log( this.selfModel)\n          this.selfModel = val;\n        }\n      }\n    },\n\n    isChecked() {\n      console.log(111)\n      if ({}.toString.call(this.model) === '[object Boolean]') {\n        return this.model;\n      } else if (Array.isArray(this.model)) {\n        return this.model.indexOf(this.label) > -1;\n      } else if (this.model !== null && this.model !== undefined) {\n        return this.model === this.trueLabel;\n      }\n    },\n\n    _checkboxGroup() {\n      let parent = this.$parent;\n      while (parent) {\n        if (parent.$options.componentName !== 'ElCheckboxGroup') {\n          parent = parent.$parent;\n        } else {\n          return parent;\n        }\n      }\n      return false;\n    },\n\n    store() {\n      return this._checkboxGroup ? this._checkboxGroup.value : this.value;\n    },\n\n    activeStyle() {\n      return {\n        backgroundColor: this._checkboxGroup.fill || '',\n        borderColor: this._checkboxGroup.fill || '',\n        color: this._checkboxGroup.textColor || '',\n        'box-shadow': '-1px 0 0 0 ' + this._checkboxGroup.fill\n\n      };\n    },\n\n    _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n\n    size() {\n      return this._checkboxGroup.checkboxGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n\n    /* used to make the isDisabled judgment under max/min props */\n    isLimitDisabled() {\n      const { max, min } = this._checkboxGroup;\n      return !!(max || min) &&\n        (this.model.length >= max && !this.isChecked) ||\n        (this.model.length <= min && this.isChecked);\n    },\n\n    isDisabled() {\n      return this._checkboxGroup\n        ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled\n        : this.disabled || (this.elForm || {}).disabled;\n    }\n  },\n  methods: {\n    addToStore() {\n      if (\n        Array.isArray(this.model) &&\n        this.model.indexOf(this.label) === -1\n      ) {\n        this.model.push(this.label);\n      } else {\n        this.model = this.trueLabel || true;\n      }\n    },\n    handleChange(ev) { \n      console.log(this.isLimitExceeded)\n      if (this.isLimitExceeded) return;\n      let value;\n      if (ev.target.checked) {\n        value = this.trueLabel === undefined ? true : this.trueLabel;\n      } else {\n        value = this.falseLabel === undefined ? false : this.falseLabel;\n      }\n      this.$emit('change', value, ev);\n      this.$nextTick(() => {\n        if (this._checkboxGroup) {\n          this.dispatch('ElCheckboxGroup', 'change', [this._checkboxGroup.value]);\n        }\n      });\n    }\n  },\n\n  created() {\n    this.checked && this.addToStore();\n  }\n};\n",{"version":3,"sources":["checkbox-button.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"checkbox-button.vue","sourceRoot":"node_modules/element-ui/packages/checkbox/src","sourcesContent":["<template>\n  <label\n    class=\"el-checkbox-button\"\n      :class=\"[\n        size ? 'el-checkbox-button--' + size : '',\n        { 'is-disabled': isDisabled },\n        { 'is-checked': isChecked },\n        { 'is-focus': focus },\n      ]\"\n    role=\"checkbox\"\n    :aria-checked=\"isChecked\"\n    :aria-disabled=\"isDisabled\"\n    >\n    <input\n      v-if=\"trueLabel || falseLabel\"\n      class=\"el-checkbox-button__original\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueLabel\"\n      :false-value=\"falseLabel\"\n      v-model=\"model\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\">\n    <input\n      v-else\n      class=\"el-checkbox-button__original\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :disabled=\"isDisabled\"\n      :value=\"label\"\n      v-model=\"model\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\">\n\n    <span class=\"el-checkbox-button__inner\"\n      v-if=\"$slots.default || label\"\n      :style=\"isChecked ? activeStyle : null\">\n      <slot>{{label}}</slot>\n    </span>\n\n  </label>\n</template>\n<script>\n  import Emitter from 'element-ui/src/mixins/emitter';\n\n  export default {\n    name: 'ElCheckboxButton',\n\n    mixins: [Emitter],\n\n    inject: {\n      elForm: {\n        default: ''\n      },\n      elFormItem: {\n        default: ''\n      }\n    },\n\n    data() {\n      return {\n        selfModel: false,\n        focus: false,\n        isLimitExceeded: false\n      };\n    },\n\n    props: {\n      value: {},\n      label: {},\n      disabled: Boolean,\n      checked: Boolean,\n      name: String,\n      trueLabel: [String, Number],\n      falseLabel: [String, Number]\n    },\n    computed: {\n      model: {\n        get() {\n          // console.log(this.value, this.selfModel)\n          return this._checkboxGroup\n            ? this.store : this.value !== undefined\n              ? this.value : this.selfModel;\n        },\n\n        set(val) {\n          // console.log(val)\n          if (this._checkboxGroup) {\n            this.isLimitExceeded = false;\n            (this._checkboxGroup.min !== undefined &&\n              val.length < this._checkboxGroup.min &&\n              (this.isLimitExceeded = true));\n\n            (this._checkboxGroup.max !== undefined &&\n              val.length > this._checkboxGroup.max &&\n              (this.isLimitExceeded = true));\n\n            this.isLimitExceeded === false &&\n            this.dispatch('ElCheckboxGroup', 'input', [val]);\n          } else if (this.value !== undefined) {\n            this.$emit('input', val);\n          } else {\n            // console.log( this.selfModel)\n            this.selfModel = val;\n          }\n        }\n      },\n\n      isChecked() {\n        console.log(111)\n        if ({}.toString.call(this.model) === '[object Boolean]') {\n          return this.model;\n        } else if (Array.isArray(this.model)) {\n          return this.model.indexOf(this.label) > -1;\n        } else if (this.model !== null && this.model !== undefined) {\n          return this.model === this.trueLabel;\n        }\n      },\n\n      _checkboxGroup() {\n        let parent = this.$parent;\n        while (parent) {\n          if (parent.$options.componentName !== 'ElCheckboxGroup') {\n            parent = parent.$parent;\n          } else {\n            return parent;\n          }\n        }\n        return false;\n      },\n\n      store() {\n        return this._checkboxGroup ? this._checkboxGroup.value : this.value;\n      },\n\n      activeStyle() {\n        return {\n          backgroundColor: this._checkboxGroup.fill || '',\n          borderColor: this._checkboxGroup.fill || '',\n          color: this._checkboxGroup.textColor || '',\n          'box-shadow': '-1px 0 0 0 ' + this._checkboxGroup.fill\n\n        };\n      },\n\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n\n      size() {\n        return this._checkboxGroup.checkboxGroupSize || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      },\n\n      /* used to make the isDisabled judgment under max/min props */\n      isLimitDisabled() {\n        const { max, min } = this._checkboxGroup;\n        return !!(max || min) &&\n          (this.model.length >= max && !this.isChecked) ||\n          (this.model.length <= min && this.isChecked);\n      },\n\n      isDisabled() {\n        return this._checkboxGroup\n          ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled\n          : this.disabled || (this.elForm || {}).disabled;\n      }\n    },\n    methods: {\n      addToStore() {\n        if (\n          Array.isArray(this.model) &&\n          this.model.indexOf(this.label) === -1\n        ) {\n          this.model.push(this.label);\n        } else {\n          this.model = this.trueLabel || true;\n        }\n      },\n      handleChange(ev) { \n        console.log(this.isLimitExceeded)\n        if (this.isLimitExceeded) return;\n        let value;\n        if (ev.target.checked) {\n          value = this.trueLabel === undefined ? true : this.trueLabel;\n        } else {\n          value = this.falseLabel === undefined ? false : this.falseLabel;\n        }\n        this.$emit('change', value, ev);\n        this.$nextTick(() => {\n          if (this._checkboxGroup) {\n            this.dispatch('ElCheckboxGroup', 'change', [this._checkboxGroup.value]);\n          }\n        });\n      }\n    },\n\n    created() {\n      this.checked && this.addToStore();\n    }\n  };\n</script>\n"]}]}