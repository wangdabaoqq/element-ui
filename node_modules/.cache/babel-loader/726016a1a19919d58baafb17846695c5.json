{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js!/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/checkbox/src/checkbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/checkbox/src/checkbox.vue","mtime":1579314573619},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Emitter from 'element-ui/src/mixins/emitter';\nexport default {\n  name: 'ElCheckbox',\n  mixins: [Emitter],\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  componentName: 'ElCheckbox',\n  data: function data() {\n    return {\n      selfModel: false,\n      focus: false,\n      isLimitExceeded: false\n    };\n  },\n  computed: {\n    model: {\n      get: function get() {\n        console.log('test');\n        return this.isGroup ? this.store : this.value !== undefined ? this.value : this.selfModel;\n      },\n      set: function set(val) {\n        if (this.isGroup) {\n          this.isLimitExceeded = false;\n          this._checkboxGroup.min !== undefined && val.length < this._checkboxGroup.min && (this.isLimitExceeded = true);\n          this._checkboxGroup.max !== undefined && val.length > this._checkboxGroup.max && (this.isLimitExceeded = true); // console.log(this._checkboxGroup.min, val, this.isLimitExceeded)\n\n          this.isLimitExceeded === false && // console.log(val)\n          this.dispatch('ElCheckboxGroup', 'input', [val]);\n        } else {\n          // console.log(111)\n          this.$emit('input', val);\n          this.selfModel = val; // console.log(1111)\n        }\n      }\n    },\n    isChecked: function isChecked() {\n      console.log(this.model, this);\n\n      if ({}.toString.call(this.model) === '[object Boolean]') {\n        return this.model;\n      } else if (Array.isArray(this.model)) {\n        return this.model.indexOf(this.label) > -1;\n      } else if (this.model !== null && this.model !== undefined) {\n        return this.model === this.trueLabel;\n      }\n    },\n    isGroup: function isGroup() {\n      var parent = this.$parent;\n\n      while (parent) {\n        if (parent.$options.componentName !== 'ElCheckboxGroup') {\n          parent = parent.$parent;\n        } else {\n          this._checkboxGroup = parent;\n          return true;\n        }\n      }\n\n      return false;\n    },\n    store: function store() {\n      return this._checkboxGroup ? this._checkboxGroup.value : this.value;\n    },\n\n    /* used to make the isDisabled judgment under max/min props */\n    isLimitDisabled: function isLimitDisabled() {\n      var _this$_checkboxGroup = this._checkboxGroup,\n          max = _this$_checkboxGroup.max,\n          min = _this$_checkboxGroup.min;\n      return !!(max || min) && this.model.length >= max && !this.isChecked || this.model.length <= min && this.isChecked;\n    },\n    isDisabled: function isDisabled() {\n      return this.isGroup ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled : this.disabled || (this.elForm || {}).disabled;\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    checkboxSize: function checkboxSize() {\n      var temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      return this.isGroup ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize : temCheckboxSize;\n    }\n  },\n  props: {\n    value: {},\n    label: {},\n    indeterminate: Boolean,\n    disabled: Boolean,\n    checked: Boolean,\n    name: String,\n    trueLabel: [String, Number],\n    falseLabel: [String, Number],\n    id: String,\n\n    /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/\n    controls: String,\n\n    /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/\n    border: Boolean,\n    size: String\n  },\n  methods: {\n    addToStore: function addToStore() {\n      if (Array.isArray(this.model) && this.model.indexOf(this.label) === -1) {\n        this.model.push(this.label);\n      } else {\n        // console.log(this.trueLabel || true)\n        this.model = this.trueLabel || true;\n      }\n    },\n    handleChange: function handleChange(ev) {\n      var _this = this;\n\n      if (this.isLimitExceeded) return;\n      var value; // console.log(ev.target.checked)\n\n      if (ev.target.checked) {\n        value = this.trueLabel === undefined ? true : this.trueLabel;\n      } else {\n        value = this.falseLabel === undefined ? false : this.falseLabel;\n      } // console.log(value, this)\n      // console.log(this.isDisabled)\n\n\n      this.$emit('change', value, ev);\n      this.$nextTick(function () {\n        if (_this.isGroup) {\n          _this.dispatch('ElCheckboxGroup', 'change', [_this._checkboxGroup.value]);\n        }\n      });\n    }\n  },\n  created: function created() {\n    // console.log(this.trueLabel, this.checked)\n    this.checked && this.addToStore();\n  },\n  mounted: function mounted() {\n    // 为indeterminate元素 添加aria-controls 属性\n    if (this.indeterminate) {\n      console.log(this.controls);\n      this.$el.setAttribute('aria-controls', this.controls);\n    }\n  },\n  watch: {\n    value: function value(_value) {\n      this.dispatch('ElFormItem', 'el.form.change', _value);\n    }\n  }\n};",{"version":3,"sources":["checkbox.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <label\n    class=\"el-checkbox\"\n    :class=\"[\n      border && checkboxSize ? 'el-checkbox--' + checkboxSize : '',\n      { 'is-disabled': isDisabled },\n      { 'is-bordered': border },\n      { 'is-checked': isChecked }\n    ]\"\n    :id=\"id\"\n  >\n    <span class=\"el-checkbox__input\"\n      :class=\"{\n        'is-disabled': isDisabled,\n        'is-checked': isChecked,\n        'is-indeterminate': indeterminate,\n        'is-focus': focus\n      }\"\n      :tabindex=\"indeterminate ? 0 : false\"\n      :role=\"indeterminate ? 'checkbox' : false\"\n      :aria-checked=\"indeterminate ? 'mixed' : false\"\n    >\n      <span class=\"el-checkbox__inner\"></span>\n      <input\n        v-if=\"trueLabel || falseLabel\"\n        class=\"el-checkbox__original\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :name=\"name\"\n        :disabled=\"isDisabled\"\n        :true-value=\"trueLabel\"\n        :false-value=\"falseLabel\"\n        v-model=\"model\"\n        @change=\"handleChange\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\">\n      <input\n        v-else\n        class=\"el-checkbox__original\"\n        type=\"checkbox\"\n        :aria-hidden=\"indeterminate ? 'true' : 'false'\"\n        :disabled=\"isDisabled\"\n        :value=\"label\"\n        :name=\"name\"\n        v-model=\"model\"\n        @change=\"handleChange\"\n        @focus=\"focus = true\"\n        @blur=\"focus = false\">\n    </span>\n    <span class=\"el-checkbox__label\" v-if=\"$slots.default || label\">\n      <slot></slot>\n      <template v-if=\"!$slots.default\">{{label}}</template>\n    </span>\n  </label>\n</template>\n<script>\n  import Emitter from 'element-ui/src/mixins/emitter';\n\n  export default {\n    name: 'ElCheckbox',\n\n    mixins: [Emitter],\n\n    inject: {\n      elForm: {\n        default: ''\n      },\n      elFormItem: {\n        default: ''\n      }\n    },\n\n    componentName: 'ElCheckbox',\n\n    data() {\n      return {\n        selfModel: false,\n        focus: false,\n        isLimitExceeded: false\n      };\n    },\n\n    computed: {\n      model: {\n        get() {\n          console.log('test')\n          return this.isGroup\n            ? this.store : this.value !== undefined\n              ? this.value : this.selfModel;\n        },\n\n        set(val) {\n          if (this.isGroup) {\n            this.isLimitExceeded = false;\n            \n            (this._checkboxGroup.min !== undefined &&\n              val.length < this._checkboxGroup.min &&\n              (this.isLimitExceeded = true));\n\n            (this._checkboxGroup.max !== undefined &&\n              val.length > this._checkboxGroup.max &&\n              (this.isLimitExceeded = true));\n              // console.log(this._checkboxGroup.min, val, this.isLimitExceeded)\n            this.isLimitExceeded === false &&\n            // console.log(val)\n            this.dispatch('ElCheckboxGroup', 'input', [val]);\n          } else {\n            // console.log(111)\n            this.$emit('input', val);\n            this.selfModel = val;\n            // console.log(1111)\n          }\n        }\n      },\n\n      isChecked() {\n        console.log(this.model, this)\n        if ({}.toString.call(this.model) === '[object Boolean]') {\n          return this.model;\n        } else if (Array.isArray(this.model)) {\n          return this.model.indexOf(this.label) > -1;\n        } else if (this.model !== null && this.model !== undefined) {\n          return this.model === this.trueLabel;\n        }\n      },\n\n      isGroup() {\n        let parent = this.$parent;\n        while (parent) {\n          if (parent.$options.componentName !== 'ElCheckboxGroup') {\n            parent = parent.$parent;\n          } else {\n            this._checkboxGroup = parent;\n            return true;\n          }\n        }\n        return false;\n      },\n\n      store() {\n        return this._checkboxGroup ? this._checkboxGroup.value : this.value;\n      },\n\n      /* used to make the isDisabled judgment under max/min props */\n      isLimitDisabled() {\n        const { max, min } = this._checkboxGroup;\n        return !!(max || min) &&\n          (this.model.length >= max && !this.isChecked) ||\n          (this.model.length <= min && this.isChecked);\n      },\n\n      isDisabled() {\n        return this.isGroup\n          ? this._checkboxGroup.disabled || this.disabled || (this.elForm || {}).disabled || this.isLimitDisabled\n          : this.disabled || (this.elForm || {}).disabled;\n      },\n\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n\n      checkboxSize() {\n        const temCheckboxSize = this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n        return this.isGroup\n          ? this._checkboxGroup.checkboxGroupSize || temCheckboxSize\n          : temCheckboxSize;\n      }\n    },\n\n    props: {\n      value: {},\n      label: {},\n      indeterminate: Boolean,\n      disabled: Boolean,\n      checked: Boolean,\n      name: String,\n      trueLabel: [String, Number],\n      falseLabel: [String, Number],\n      id: String, /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/\n      controls: String, /* 当indeterminate为真时，为controls提供相关连的checkbox的id，表明元素间的控制关系*/\n      border: Boolean,\n      size: String\n    },\n\n    methods: {\n      addToStore() {\n        if (\n          Array.isArray(this.model) &&\n          this.model.indexOf(this.label) === -1\n        ) {\n          this.model.push(this.label);\n        } else {\n          // console.log(this.trueLabel || true)\n          this.model = this.trueLabel || true;\n        }\n      },\n      handleChange(ev) {\n        if (this.isLimitExceeded) return;\n        let value;\n        // console.log(ev.target.checked)\n        if (ev.target.checked) {\n          value = this.trueLabel === undefined ? true : this.trueLabel;\n        } else {\n          value = this.falseLabel === undefined ? false : this.falseLabel;\n        }\n        // console.log(value, this)\n        // console.log(this.isDisabled)\n        this.$emit('change', value, ev);\n        this.$nextTick(() => {\n          if (this.isGroup) {\n            this.dispatch('ElCheckboxGroup', 'change', [this._checkboxGroup.value]);\n          }\n        });\n      }\n    },\n    created() {\n      // console.log(this.trueLabel, this.checked)\n      this.checked && this.addToStore();\n    },\n    mounted() { // 为indeterminate元素 添加aria-controls 属性\n      if (this.indeterminate) {\n        console.log(this.controls)\n        this.$el.setAttribute('aria-controls', this.controls);\n      }\n    },\n\n    watch: {\n      value(value) {\n        this.dispatch('ElFormItem', 'el.form.change', value);\n      }\n    }\n  };\n</script>\n"],"sourceRoot":"node_modules/element-ui/packages/checkbox/src"}]}