{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js!/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input/src/input.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input/src/input.vue","mtime":1580138358912},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport emitter from 'element-ui/src/mixins/emitter';\nimport Migrating from 'element-ui/src/mixins/migrating';\nimport calcTextareaHeight from \"./calcTextareaHeight\";\nimport merge from 'element-ui/src/utils/merge';\nimport { isKorean } from 'element-ui/src/utils/shared';\nexport default {\n  name: 'ElInput',\n  componentName: 'ElInput',\n  mixins: [emitter, Migrating],\n  inheritAttrs: false,\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      textareaCalcStyle: {},\n      hovering: false,\n      focused: false,\n      isComposing: false,\n      passwordVisible: false\n    };\n  },\n  props: {\n    value: [String, Number],\n    size: String,\n    resize: String,\n    form: String,\n    disabled: Boolean,\n    readonly: Boolean,\n    type: {\n      type: String,\n      default: 'text'\n    },\n    autosize: {\n      type: [Boolean, Object],\n      default: false\n    },\n    autocomplete: {\n      type: String,\n      default: 'off'\n    },\n\n    /** @Deprecated in next major version */\n    autoComplete: {\n      type: String,\n      validator: function validator(val) {\n        process.env.NODE_ENV !== 'production' && console.warn('[Element Warn][Input]\\'auto-complete\\' property will be deprecated in next major version. please use \\'autocomplete\\' instead.');\n        return true;\n      }\n    },\n    validateEvent: {\n      type: Boolean,\n      default: true\n    },\n    suffixIcon: String,\n    prefixIcon: String,\n    label: String,\n    clearable: {\n      type: Boolean,\n      default: false\n    },\n    showPassword: {\n      type: Boolean,\n      default: false\n    },\n    showWordLimit: {\n      type: Boolean,\n      default: false\n    },\n    tabindex: String\n  },\n  computed: {\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    validateState: function validateState() {\n      return this.elFormItem ? this.elFormItem.validateState : '';\n    },\n    needStatusIcon: function needStatusIcon() {\n      return this.elForm ? this.elForm.statusIcon : false;\n    },\n    validateIcon: function validateIcon() {\n      return {\n        validating: 'el-icon-loading',\n        success: 'el-icon-circle-check',\n        error: 'el-icon-circle-close'\n      }[this.validateState];\n    },\n    textareaStyle: function textareaStyle() {\n      return merge({}, this.textareaCalcStyle, {\n        resize: this.resize\n      });\n    },\n    inputSize: function inputSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    inputDisabled: function inputDisabled() {\n      console.log(this.$attrs);\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    nativeInputValue: function nativeInputValue() {\n      return this.value === null || this.value === undefined ? '' : String(this.value);\n    },\n    showClear: function showClear() {\n      return this.clearable && !this.inputDisabled && !this.readonly && this.nativeInputValue && (this.focused || this.hovering);\n    },\n    showPwdVisible: function showPwdVisible() {\n      return this.showPassword && !this.inputDisabled && !this.readonly && (!!this.nativeInputValue || this.focused);\n    },\n    isWordLimitVisible: function isWordLimitVisible() {\n      return this.showWordLimit && this.$attrs.maxlength && (this.type === 'text' || this.type === 'textarea') && !this.inputDisabled && !this.readonly && !this.showPassword;\n    },\n    upperLimit: function upperLimit() {\n      return this.$attrs.maxlength;\n    },\n    textLength: function textLength() {\n      if (typeof this.value === 'number') {\n        return String(this.value).length;\n      }\n\n      return (this.value || '').length;\n    },\n    inputExceed: function inputExceed() {\n      // show exceed style if length of initial value greater then maxlength\n      return this.isWordLimitVisible && this.textLength > this.upperLimit;\n    }\n  },\n  watch: {\n    value: function value(val) {\n      this.$nextTick(this.resizeTextarea);\n\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.change', [val]);\n      }\n    },\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    nativeInputValue: function nativeInputValue() {\n      this.setNativeInputValue();\n    },\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    type: function type() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.setNativeInputValue();\n\n        _this.resizeTextarea();\n\n        _this.updateIconOffset();\n      });\n    }\n  },\n  methods: {\n    focus: function focus() {\n      this.getInput().focus();\n    },\n    blur: function blur() {\n      this.getInput().blur();\n    },\n    getMigratingConfig: function getMigratingConfig() {\n      return {\n        props: {\n          'icon': 'icon is removed, use suffix-icon / prefix-icon instead.',\n          'on-icon-click': 'on-icon-click is removed.'\n        },\n        events: {\n          'click': 'click is removed.'\n        }\n      };\n    },\n    handleBlur: function handleBlur(event) {\n      this.focused = false;\n      this.$emit('blur', event);\n\n      if (this.validateEvent) {\n        this.dispatch('ElFormItem', 'el.form.blur', [this.value]);\n      }\n    },\n    select: function select() {\n      this.getInput().select();\n    },\n    resizeTextarea: function resizeTextarea() {\n      if (this.$isServer) return;\n      var autosize = this.autosize,\n          type = this.type;\n      if (type !== 'textarea') return;\n\n      if (!autosize) {\n        this.textareaCalcStyle = {\n          minHeight: calcTextareaHeight(this.$refs.textarea).minHeight\n        };\n        return;\n      }\n\n      var minRows = autosize.minRows;\n      var maxRows = autosize.maxRows;\n      this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n    },\n    setNativeInputValue: function setNativeInputValue() {\n      var input = this.getInput();\n      if (!input) return;\n      if (input.value === this.nativeInputValue) return;\n      input.value = this.nativeInputValue;\n    },\n    handleFocus: function handleFocus(event) {\n      this.focused = true;\n      this.$emit('focus', event);\n    },\n    handleCompositionStart: function handleCompositionStart() {\n      this.isComposing = true;\n    },\n    handleCompositionUpdate: function handleCompositionUpdate(event) {\n      var text = event.target.value;\n      var lastCharacter = text[text.length - 1] || '';\n      this.isComposing = !isKorean(lastCharacter);\n    },\n    handleCompositionEnd: function handleCompositionEnd(event) {\n      if (this.isComposing) {\n        this.isComposing = false;\n        this.handleInput(event);\n      }\n    },\n    handleInput: function handleInput(event) {\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (this.isComposing) return; // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n\n      if (event.target.value === this.nativeInputValue) return;\n      this.$emit('input', event.target.value); // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n\n      this.$nextTick(this.setNativeInputValue);\n    },\n    handleChange: function handleChange(event) {\n      this.$emit('change', event.target.value);\n    },\n    calcIconOffset: function calcIconOffset(place) {\n      var elList = [].slice.call(this.$el.querySelectorAll(\".el-input__\".concat(place)) || []);\n      if (!elList.length) return;\n      var el = null;\n\n      for (var i = 0; i < elList.length; i++) {\n        if (elList[i].parentNode === this.$el) {\n          el = elList[i];\n          break;\n        }\n      }\n\n      if (!el) return;\n      var pendantMap = {\n        suffix: 'append',\n        prefix: 'prepend'\n      };\n      var pendant = pendantMap[place];\n\n      if (this.$slots[pendant]) {\n        el.style.transform = \"translateX(\".concat(place === 'suffix' ? '-' : '').concat(this.$el.querySelector(\".el-input-group__\".concat(pendant)).offsetWidth, \"px)\");\n      } else {\n        el.removeAttribute('style');\n      }\n    },\n    updateIconOffset: function updateIconOffset() {\n      this.calcIconOffset('prefix');\n      this.calcIconOffset('suffix');\n    },\n    clear: function clear() {\n      this.$emit('input', '');\n      this.$emit('change', '');\n      this.$emit('clear');\n    },\n    handlePasswordVisible: function handlePasswordVisible() {\n      this.passwordVisible = !this.passwordVisible;\n      this.focus();\n    },\n    getInput: function getInput() {\n      return this.$refs.input || this.$refs.textarea;\n    },\n    getSuffixVisible: function getSuffixVisible() {\n      return this.$slots.suffix || this.suffixIcon || this.showClear || this.showPassword || this.isWordLimitVisible || this.validateState && this.needStatusIcon;\n    }\n  },\n  created: function created() {\n    this.$on('inputSelect', this.select);\n  },\n  mounted: function mounted() {\n    this.setNativeInputValue();\n    this.resizeTextarea();\n    this.updateIconOffset();\n  },\n  updated: function updated() {\n    this.$nextTick(this.updateIconOffset);\n  }\n};",{"version":3,"sources":["input.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div :class=\"[\n    type === 'textarea' ? 'el-textarea' : 'el-input',\n    inputSize ? 'el-input--' + inputSize : '',\n    {\n      'is-disabled': inputDisabled,\n      'is-exceed': inputExceed,\n      'el-input-group': $slots.prepend || $slots.append,\n      'el-input-group--append': $slots.append,\n      'el-input-group--prepend': $slots.prepend,\n      'el-input--prefix': $slots.prefix || prefixIcon,\n      'el-input--suffix': $slots.suffix || suffixIcon || clearable || showPassword\n    }\n    ]\"\n    @mouseenter=\"hovering = true\"\n    @mouseleave=\"hovering = false\"\n  >\n    <template v-if=\"type !== 'textarea'\">\n      <!-- 前置元素 -->\n      <div class=\"el-input-group__prepend\" v-if=\"$slots.prepend\">\n        <slot name=\"prepend\"></slot>\n      </div>\n      <input\n        :tabindex=\"tabindex\"\n        v-if=\"type !== 'textarea'\"\n        class=\"el-input__inner\"\n        v-bind=\"$attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text': 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autoComplete || autocomplete\"\n        ref=\"input\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        :aria-label=\"label\"\n      >\n      <!-- 前置内容 -->\n      <span class=\"el-input__prefix\" v-if=\"$slots.prefix || prefixIcon\">\n        <slot name=\"prefix\"></slot>\n        <i class=\"el-input__icon\"\n           v-if=\"prefixIcon\"\n           :class=\"prefixIcon\">\n        </i>\n      </span>\n      <!-- 后置内容 -->\n      <span\n        class=\"el-input__suffix\"\n        v-if=\"getSuffixVisible()\">\n        <span class=\"el-input__suffix-inner\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <i class=\"el-input__icon\"\n              v-if=\"suffixIcon\"\n              :class=\"suffixIcon\">\n            </i>\n          </template>\n          <i v-if=\"showClear\"\n            class=\"el-input__icon el-icon-circle-close el-input__clear\"\n            @mousedown.prevent\n            @click=\"clear\"\n          ></i>\n          <i v-if=\"showPwdVisible\"\n            class=\"el-input__icon el-icon-view el-input__clear\"\n            @click=\"handlePasswordVisible\"\n          ></i>\n          <span v-if=\"isWordLimitVisible\" class=\"el-input__count\">\n            <span class=\"el-input__count-inner\">\n              {{ textLength }}/{{ upperLimit }}\n            </span>\n          </span>\n        </span>\n        <i class=\"el-input__icon\"\n          v-if=\"validateState\"\n          :class=\"['el-input__validateIcon', validateIcon]\">\n        </i>\n      </span>\n      <!-- 后置元素 -->\n      <div class=\"el-input-group__append\" v-if=\"$slots.append\">\n        <slot name=\"append\"></slot>\n      </div>\n    </template>\n    <textarea\n      v-else\n      :tabindex=\"tabindex\"\n      class=\"el-textarea__inner\"\n      @compositionstart=\"handleCompositionStart\"\n      @compositionupdate=\"handleCompositionUpdate\"\n      @compositionend=\"handleCompositionEnd\"\n      @input=\"handleInput\"\n      ref=\"textarea\"\n      v-bind=\"$attrs\"\n      :disabled=\"inputDisabled\"\n      :readonly=\"readonly\"\n      :autocomplete=\"autoComplete || autocomplete\"\n      :style=\"textareaStyle\"\n      @focus=\"handleFocus\"\n      @blur=\"handleBlur\"\n      @change=\"handleChange\"\n      :aria-label=\"label\"\n    >\n    </textarea>\n    <span v-if=\"isWordLimitVisible && type === 'textarea'\" class=\"el-input__count\">{{ textLength }}/{{ upperLimit }}</span>\n  </div>\n</template>\n<script>\n  import emitter from 'element-ui/src/mixins/emitter';\n  import Migrating from 'element-ui/src/mixins/migrating';\n  import calcTextareaHeight from './calcTextareaHeight';\n  import merge from 'element-ui/src/utils/merge';\n  import {isKorean} from 'element-ui/src/utils/shared';\n\n  export default {\n    name: 'ElInput',\n\n    componentName: 'ElInput',\n\n    mixins: [emitter, Migrating],\n\n    inheritAttrs: false,\n\n    inject: {\n      elForm: {\n        default: ''\n      },\n      elFormItem: {\n        default: ''\n      }\n    },\n\n    data() {\n      return {\n        textareaCalcStyle: {},\n        hovering: false,\n        focused: false,\n        isComposing: false,\n        passwordVisible: false\n      };\n    },\n\n    props: {\n      value: [String, Number],\n      size: String,\n      resize: String,\n      form: String,\n      disabled: Boolean,\n      readonly: Boolean,\n      type: {\n        type: String,\n        default: 'text'\n      },\n      autosize: {\n        type: [Boolean, Object],\n        default: false\n      },\n      autocomplete: {\n        type: String,\n        default: 'off'\n      },\n      /** @Deprecated in next major version */\n      autoComplete: {\n        type: String,\n        validator(val) {\n          process.env.NODE_ENV !== 'production' &&\n            console.warn('[Element Warn][Input]\\'auto-complete\\' property will be deprecated in next major version. please use \\'autocomplete\\' instead.');\n          return true;\n        }\n      },\n      validateEvent: {\n        type: Boolean,\n        default: true\n      },\n      suffixIcon: String,\n      prefixIcon: String,\n      label: String,\n      clearable: {\n        type: Boolean,\n        default: false\n      },\n      showPassword: {\n        type: Boolean,\n        default: false\n      },\n      showWordLimit: {\n        type: Boolean,\n        default: false\n      },\n      tabindex: String\n    },\n\n    computed: {\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n      validateState() {\n        return this.elFormItem ? this.elFormItem.validateState : '';\n      },\n      needStatusIcon() {\n        return this.elForm ? this.elForm.statusIcon : false;\n      },\n      validateIcon() {\n        return {\n          validating: 'el-icon-loading',\n          success: 'el-icon-circle-check',\n          error: 'el-icon-circle-close'\n        }[this.validateState];\n      },\n      textareaStyle() {\n        return merge({}, this.textareaCalcStyle, { resize: this.resize });\n      },\n      inputSize() {\n        return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      },\n      inputDisabled() {\n        console.log(this.$attrs)\n        return this.disabled || (this.elForm || {}).disabled;\n      },\n      nativeInputValue() {\n        return this.value === null || this.value === undefined ? '' : String(this.value);\n      },\n      showClear() {\n        return this.clearable &&\n          !this.inputDisabled &&\n          !this.readonly &&\n          this.nativeInputValue &&\n          (this.focused || this.hovering);\n      },\n      showPwdVisible() {\n        return this.showPassword &&\n          !this.inputDisabled &&\n          !this.readonly &&\n          (!!this.nativeInputValue || this.focused);\n      },\n      isWordLimitVisible() {\n        return this.showWordLimit &&\n          this.$attrs.maxlength &&\n          (this.type === 'text' || this.type === 'textarea') &&\n          !this.inputDisabled &&\n          !this.readonly &&\n          !this.showPassword;\n      },\n      upperLimit() {\n        return this.$attrs.maxlength;\n      },\n      textLength() {\n        if (typeof this.value === 'number') {\n          return String(this.value).length;\n        }\n\n        return (this.value || '').length;\n      },\n      inputExceed() {\n        // show exceed style if length of initial value greater then maxlength\n        return this.isWordLimitVisible &&\n          (this.textLength > this.upperLimit);\n      }\n    },\n\n    watch: {\n      value(val) {\n        this.$nextTick(this.resizeTextarea);\n        if (this.validateEvent) {\n          this.dispatch('ElFormItem', 'el.form.change', [val]);\n        }\n      },\n      // native input value is set explicitly\n      // do not use v-model / :value in template\n      // see: https://github.com/ElemeFE/element/issues/14521\n      nativeInputValue() {\n        this.setNativeInputValue();\n      },\n      // when change between <input> and <textarea>,\n      // update DOM dependent value and styles\n      // https://github.com/ElemeFE/element/issues/14857\n      type() {\n        this.$nextTick(() => {\n          this.setNativeInputValue();\n          this.resizeTextarea();\n          this.updateIconOffset();\n        });\n      }\n    },\n\n    methods: {\n      focus() {\n        this.getInput().focus();\n      },\n      blur() {\n        this.getInput().blur();\n      },\n      getMigratingConfig() {\n        return {\n          props: {\n            'icon': 'icon is removed, use suffix-icon / prefix-icon instead.',\n            'on-icon-click': 'on-icon-click is removed.'\n          },\n          events: {\n            'click': 'click is removed.'\n          }\n        };\n      },\n      handleBlur(event) {\n        this.focused = false;\n        this.$emit('blur', event);\n        if (this.validateEvent) {\n          this.dispatch('ElFormItem', 'el.form.blur', [this.value]);\n        }\n      },\n      select() {\n        this.getInput().select();\n      },\n      resizeTextarea() {\n        if (this.$isServer) return;\n        const { autosize, type } = this;\n        if (type !== 'textarea') return;\n        if (!autosize) {\n          this.textareaCalcStyle = {\n            minHeight: calcTextareaHeight(this.$refs.textarea).minHeight\n          };\n          return;\n        }\n        const minRows = autosize.minRows;\n        const maxRows = autosize.maxRows;\n\n        this.textareaCalcStyle = calcTextareaHeight(this.$refs.textarea, minRows, maxRows);\n      },\n      setNativeInputValue() {\n        const input = this.getInput();\n        if (!input) return;\n        if (input.value === this.nativeInputValue) return;\n        input.value = this.nativeInputValue;\n      },\n      handleFocus(event) {\n        this.focused = true;\n        this.$emit('focus', event);\n      },\n      handleCompositionStart() {\n        this.isComposing = true;\n      },\n      handleCompositionUpdate(event) {\n        const text = event.target.value;\n        const lastCharacter = text[text.length - 1] || '';\n        this.isComposing = !isKorean(lastCharacter);\n      },\n      handleCompositionEnd(event) {\n        if (this.isComposing) {\n          this.isComposing = false;\n          this.handleInput(event);\n        }\n      },\n      handleInput(event) {\n        // should not emit input during composition\n        // see: https://github.com/ElemeFE/element/issues/10516\n        if (this.isComposing) return;\n\n        // hack for https://github.com/ElemeFE/element/issues/8548\n        // should remove the following line when we don't support IE\n        if (event.target.value === this.nativeInputValue) return;\n\n        this.$emit('input', event.target.value);\n\n        // ensure native input value is controlled\n        // see: https://github.com/ElemeFE/element/issues/12850\n        this.$nextTick(this.setNativeInputValue);\n      },\n      handleChange(event) {\n        this.$emit('change', event.target.value);\n      },\n      calcIconOffset(place) {\n        let elList = [].slice.call(this.$el.querySelectorAll(`.el-input__${place}`) || []);\n        if (!elList.length) return;\n        let el = null;\n        for (let i = 0; i < elList.length; i++) {\n          if (elList[i].parentNode === this.$el) {\n            el = elList[i];\n            break;\n          }\n        }\n        if (!el) return;\n        const pendantMap = {\n          suffix: 'append',\n          prefix: 'prepend'\n        };\n\n        const pendant = pendantMap[place];\n        if (this.$slots[pendant]) {\n          el.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${this.$el.querySelector(`.el-input-group__${pendant}`).offsetWidth}px)`;\n        } else {\n          el.removeAttribute('style');\n        }\n      },\n      updateIconOffset() {\n        this.calcIconOffset('prefix');\n        this.calcIconOffset('suffix');\n      },\n      clear() {\n        this.$emit('input', '');\n        this.$emit('change', '');\n        this.$emit('clear');\n      },\n      handlePasswordVisible() {\n        this.passwordVisible = !this.passwordVisible;\n        this.focus();\n      },\n      getInput() {\n        return this.$refs.input || this.$refs.textarea;\n      },\n      getSuffixVisible() {\n        return this.$slots.suffix ||\n          this.suffixIcon ||\n          this.showClear ||\n          this.showPassword ||\n          this.isWordLimitVisible ||\n          (this.validateState && this.needStatusIcon);\n      }\n    },\n\n    created() {\n      this.$on('inputSelect', this.select);\n    },\n\n    mounted() {\n      this.setNativeInputValue();\n      this.resizeTextarea();\n      this.updateIconOffset();\n    },\n\n    updated() {\n      this.$nextTick(this.updateIconOffset);\n    }\n  };\n</script>\n"],"sourceRoot":"node_modules/element-ui/packages/input/src"}]}