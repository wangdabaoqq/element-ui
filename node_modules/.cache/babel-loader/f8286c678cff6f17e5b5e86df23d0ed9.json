{"remainingRequest":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js!/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input-number/src/input-number.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/element-ui/packages/input-number/src/input-number.vue","mtime":1580567586163},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/babel-loader/lib/index.js","mtime":1571627672070},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/cache-loader/dist/cjs.js","mtime":1571627676032},{"path":"/Users/wangkai/github/Vue-Giant-Tree/node_modules/vue-loader/lib/index.js","mtime":1573033317449}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ElInput from 'element-ui/packages/input';\nimport Focus from 'element-ui/src/mixins/focus';\nimport RepeatClick from 'element-ui/src/directives/repeat-click';\nexport default {\n  name: 'ElInputNumber',\n  mixins: [Focus('input')],\n  inject: {\n    elForm: {\n      default: ''\n    },\n    elFormItem: {\n      default: ''\n    }\n  },\n  directives: {\n    repeatClick: RepeatClick\n  },\n  components: {\n    ElInput: ElInput\n  },\n  props: {\n    step: {\n      type: Number,\n      default: 1\n    },\n    stepStrictly: {\n      type: Boolean,\n      default: false\n    },\n    max: {\n      type: Number,\n      default: Infinity\n    },\n    min: {\n      type: Number,\n      default: -Infinity\n    },\n    value: {},\n    disabled: Boolean,\n    size: String,\n    controls: {\n      type: Boolean,\n      default: true\n    },\n    controlsPosition: {\n      type: String,\n      default: ''\n    },\n    name: String,\n    label: String,\n    placeholder: String,\n    precision: {\n      type: Number,\n      validator: function validator(val) {\n        return val >= 0 && val === parseInt(val, 10);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      currentValue: 0,\n      userInput: null\n    };\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler: function handler(value) {\n        console.log(value);\n        var newVal = value === undefined ? value : Number(value);\n\n        if (newVal !== undefined) {\n          if (isNaN(newVal)) {\n            return;\n          }\n\n          if (this.stepStrictly) {\n            var stepPrecision = this.getPrecision(this.step);\n            var precisionFactor = Math.pow(10, stepPrecision);\n            newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;\n          }\n\n          if (this.precision !== undefined) {\n            newVal = this.toPrecision(newVal, this.precision);\n          }\n        }\n\n        if (newVal >= this.max) newVal = this.max;\n        if (newVal <= this.min) newVal = this.min;\n        this.currentValue = newVal;\n        this.userInput = null;\n        this.$emit('input', newVal);\n      }\n    }\n  },\n  computed: {\n    minDisabled: function minDisabled() {\n      return this._decrease(this.value, this.step) < this.min;\n    },\n    maxDisabled: function maxDisabled() {\n      return this._increase(this.value, this.step) > this.max;\n    },\n    numPrecision: function numPrecision() {\n      var value = this.value,\n          step = this.step,\n          getPrecision = this.getPrecision,\n          precision = this.precision;\n      var stepPrecision = getPrecision(step);\n\n      if (precision !== undefined) {\n        if (stepPrecision > precision) {\n          console.warn('[Element Warn][InputNumber]precision should not be less than the decimal places of step');\n        }\n\n        return precision;\n      } else {\n        return Math.max(getPrecision(value), stepPrecision);\n      }\n    },\n    controlsAtRight: function controlsAtRight() {\n      return this.controls && this.controlsPosition === 'right';\n    },\n    _elFormItemSize: function _elFormItemSize() {\n      return (this.elFormItem || {}).elFormItemSize;\n    },\n    inputNumberSize: function inputNumberSize() {\n      return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n    },\n    inputNumberDisabled: function inputNumberDisabled() {\n      return this.disabled || (this.elForm || {}).disabled;\n    },\n    displayValue: function displayValue() {\n      if (this.userInput !== null) {\n        return this.userInput;\n      }\n\n      var currentValue = this.currentValue;\n\n      if (typeof currentValue === 'number') {\n        if (this.stepStrictly) {\n          var stepPrecision = this.getPrecision(this.step);\n          var precisionFactor = Math.pow(10, stepPrecision);\n          currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;\n        }\n\n        if (this.precision !== undefined) {\n          currentValue = currentValue.toFixed(this.precision);\n        }\n      }\n\n      return currentValue;\n    }\n  },\n  methods: {\n    toPrecision: function toPrecision(num, precision) {\n      if (precision === undefined) precision = this.numPrecision;\n      return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));\n    },\n    getPrecision: function getPrecision(value) {\n      if (value === undefined) return 0;\n      var valueString = value.toString();\n      var dotPosition = valueString.indexOf('.');\n      var precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    },\n    _increase: function _increase(val, step) {\n      console.log(val, step, this.numPrecision);\n      if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n      var precisionFactor = Math.pow(10, this.numPrecision);\n      console.log(precisionFactor); // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n\n      return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);\n    },\n    _decrease: function _decrease(val, step) {\n      if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n      var precisionFactor = Math.pow(10, this.numPrecision);\n      return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);\n    },\n    increase: function increase() {\n      console.log(this);\n      if (this.inputNumberDisabled || this.maxDisabled) return;\n      var value = this.value || 0;\n\n      var newVal = this._increase(value, this.step);\n\n      this.setCurrentValue(newVal);\n    },\n    decrease: function decrease() {\n      // console.log(this.value)\n      console.log(this.minDisabled);\n      if (this.inputNumberDisabled || this.minDisabled) return;\n      var value = this.value || 0;\n\n      var newVal = this._decrease(value, this.step); // console.log(newVal)\n\n\n      this.setCurrentValue(newVal);\n    },\n    handleBlur: function handleBlur(event) {\n      this.$emit('blur', event);\n    },\n    handleFocus: function handleFocus(event) {\n      this.$emit('focus', event);\n    },\n    setCurrentValue: function setCurrentValue(newVal) {\n      console.log(newVal, this.precision);\n      var oldVal = this.currentValue;\n\n      if (typeof newVal === 'number' && this.precision !== undefined) {\n        newVal = this.toPrecision(newVal, this.precision);\n      }\n\n      if (newVal >= this.max) newVal = this.max;\n      if (newVal <= this.min) newVal = this.min;\n      if (oldVal === newVal) return;\n      this.userInput = null;\n      this.$emit('input', newVal);\n      this.$emit('change', newVal, oldVal);\n      this.currentValue = newVal;\n    },\n    handleInput: function handleInput(value) {\n      this.userInput = value;\n    },\n    handleInputChange: function handleInputChange(value) {\n      var newVal = value === '' ? undefined : Number(value);\n      console.log(Number(value));\n\n      if (!isNaN(newVal) || value === '') {\n        this.setCurrentValue(newVal);\n      }\n\n      this.userInput = null;\n    },\n    select: function select() {\n      this.$refs.input.select();\n    }\n  },\n  mounted: function mounted() {\n    var innerInput = this.$refs.input.$refs.input;\n    innerInput.setAttribute('role', 'spinbutton');\n    innerInput.setAttribute('aria-valuemax', this.max);\n    innerInput.setAttribute('aria-valuemin', this.min);\n    innerInput.setAttribute('aria-valuenow', this.currentValue);\n    innerInput.setAttribute('aria-disabled', this.inputNumberDisabled);\n  },\n  updated: function updated() {\n    if (!this.$refs || !this.$refs.input) return;\n    var innerInput = this.$refs.input.$refs.input;\n    innerInput.setAttribute('aria-valuenow', this.currentValue);\n  }\n};",{"version":3,"sources":["input-number.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div\n     @dragstart.prevent\n    :class=\"[\n      'el-input-number',\n      inputNumberSize ? 'el-input-number--' + inputNumberSize : '',\n      { 'is-disabled': inputNumberDisabled },\n      { 'is-without-controls': !controls },\n      { 'is-controls-right': controlsAtRight }\n    ]\">\n    <span\n      class=\"el-input-number__decrease\"\n      role=\"button\"\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      :class=\"{'is-disabled': minDisabled}\"\n      @keydown.enter=\"decrease\">\n      <i :class=\"`el-icon-${controlsAtRight ? 'arrow-down' : 'minus'}`\"></i>\n    </span>\n    <span\n      class=\"el-input-number__increase\"\n      role=\"button\"\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      :class=\"{'is-disabled': maxDisabled}\"\n      @keydown.enter=\"increase\">\n      <i :class=\"`el-icon-${controlsAtRight ? 'arrow-up' : 'plus'}`\"></i>\n    </span>\n    <el-input\n      ref=\"input\"\n      :value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      @keydown.up.native.prevent=\"increase\"\n      @keydown.down.native.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\">\n    </el-input>\n  </div>\n</template>\n<script>\n  import ElInput from 'element-ui/packages/input';\n  import Focus from 'element-ui/src/mixins/focus';\n  import RepeatClick from 'element-ui/src/directives/repeat-click';\n\n  export default {\n    name: 'ElInputNumber',\n    mixins: [Focus('input')],\n    inject: {\n      elForm: {\n        default: ''\n      },\n      elFormItem: {\n        default: ''\n      }\n    },\n    directives: {\n      repeatClick: RepeatClick\n    },\n    components: {\n      ElInput\n    },\n    props: {\n      step: {\n        type: Number,\n        default: 1\n      },\n      stepStrictly: {\n        type: Boolean,\n        default: false\n      },\n      max: {\n        type: Number,\n        default: Infinity\n      },\n      min: {\n        type: Number,\n        default: -Infinity\n      },\n      value: {},\n      disabled: Boolean,\n      size: String,\n      controls: {\n        type: Boolean,\n        default: true\n      },\n      controlsPosition: {\n        type: String,\n        default: ''\n      },\n      name: String,\n      label: String,\n      placeholder: String,\n      precision: {\n        type: Number,\n        validator(val) {\n          return val >= 0 && val === parseInt(val, 10);\n        }\n      }\n    },\n    data() {\n      return {\n        currentValue: 0,\n        userInput: null\n      };\n    },\n    watch: {\n      value: {\n        immediate: true,\n        handler(value) {\n          console.log(value);\n          \n          let newVal = value === undefined ? value : Number(value);\n          if (newVal !== undefined) {\n            if (isNaN(newVal)) {\n              return;\n            }\n\n            if (this.stepStrictly) {\n              const stepPrecision = this.getPrecision(this.step);\n              const precisionFactor = Math.pow(10, stepPrecision);\n              newVal = Math.round(newVal / this.step) * precisionFactor * this.step / precisionFactor;\n            }\n\n            if (this.precision !== undefined) {\n              newVal = this.toPrecision(newVal, this.precision);\n            }\n          }\n          if (newVal >= this.max) newVal = this.max;\n          if (newVal <= this.min) newVal = this.min;\n          this.currentValue = newVal;\n          this.userInput = null;\n          this.$emit('input', newVal);\n        }\n      }\n    },\n    computed: {\n      minDisabled() {\n        return this._decrease(this.value, this.step) < this.min;\n      },\n      maxDisabled() {\n        return this._increase(this.value, this.step) > this.max;\n      },\n      numPrecision() {\n        const { value, step, getPrecision, precision } = this;\n        const stepPrecision = getPrecision(step);\n        if (precision !== undefined) {\n          if (stepPrecision > precision) {\n            console.warn('[Element Warn][InputNumber]precision should not be less than the decimal places of step');\n          }\n          return precision;\n        } else {\n          return Math.max(getPrecision(value), stepPrecision);\n        }\n      },\n      controlsAtRight() {\n        return this.controls && this.controlsPosition === 'right';\n      },\n      _elFormItemSize() {\n        return (this.elFormItem || {}).elFormItemSize;\n      },\n      inputNumberSize() {\n        return this.size || this._elFormItemSize || (this.$ELEMENT || {}).size;\n      },\n      inputNumberDisabled() {\n        return this.disabled || (this.elForm || {}).disabled;\n      },\n      displayValue() {\n        if (this.userInput !== null) {\n          return this.userInput;\n        }\n\n        let currentValue = this.currentValue;\n\n        if (typeof currentValue === 'number') {\n          if (this.stepStrictly) {\n            const stepPrecision = this.getPrecision(this.step);\n            const precisionFactor = Math.pow(10, stepPrecision);\n            currentValue = Math.round(currentValue / this.step) * precisionFactor * this.step / precisionFactor;\n          }\n\n          if (this.precision !== undefined) {\n            currentValue = currentValue.toFixed(this.precision);\n          }\n        }\n\n        return currentValue;\n      }\n    },\n    methods: {\n      toPrecision(num, precision) {\n        if (precision === undefined) precision = this.numPrecision;\n        return parseFloat(Math.round(num * Math.pow(10, precision)) / Math.pow(10, precision));\n      },\n      getPrecision(value) {\n        if (value === undefined) return 0;\n        const valueString = value.toString();\n        const dotPosition = valueString.indexOf('.');\n        let precision = 0;\n        if (dotPosition !== -1) {\n          precision = valueString.length - dotPosition - 1;\n        }\n        return precision;\n      },\n      _increase(val, step) {\n        console.log(val, step, this.numPrecision)\n        if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n        const precisionFactor = Math.pow(10, this.numPrecision);\n        console.log(precisionFactor)\n        // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n        return this.toPrecision((precisionFactor * val + precisionFactor * step) / precisionFactor);\n      },\n      _decrease(val, step) {\n        if (typeof val !== 'number' && val !== undefined) return this.currentValue;\n\n        const precisionFactor = Math.pow(10, this.numPrecision);\n\n        return this.toPrecision((precisionFactor * val - precisionFactor * step) / precisionFactor);\n      },\n      increase() {\n        console.log(this)\n        if (this.inputNumberDisabled || this.maxDisabled) return;\n        const value = this.value || 0;\n        const newVal = this._increase(value, this.step);\n        this.setCurrentValue(newVal);\n      },\n      decrease() {\n        // console.log(this.value)\n        console.log(this.minDisabled)\n        if (this.inputNumberDisabled || this.minDisabled) return;\n        const value = this.value || 0;\n        const newVal = this._decrease(value, this.step);\n        // console.log(newVal)\n        this.setCurrentValue(newVal);\n      },\n      handleBlur(event) {\n        this.$emit('blur', event);\n      },\n      handleFocus(event) {\n        this.$emit('focus', event);\n      },\n      setCurrentValue(newVal) {\n        console.log(newVal, this.precision)\n        const oldVal = this.currentValue;\n        if (typeof newVal === 'number' && this.precision !== undefined) {\n          newVal = this.toPrecision(newVal, this.precision);\n        }\n        if (newVal >= this.max) newVal = this.max;\n        if (newVal <= this.min) newVal = this.min;\n        if (oldVal === newVal) return;\n        this.userInput = null;\n        this.$emit('input', newVal);\n        this.$emit('change', newVal, oldVal);\n        this.currentValue = newVal;\n      },\n      handleInput(value) {\n        this.userInput = value;\n      },\n      handleInputChange(value) {\n        const newVal = value === '' ? undefined : Number(value);\n        console.log(Number(value))\n        if (!isNaN(newVal) || value === '') {\n          this.setCurrentValue(newVal);\n        }\n        this.userInput = null;\n      },\n      select() {\n        this.$refs.input.select();\n      }\n    },\n    mounted() {\n      let innerInput = this.$refs.input.$refs.input;\n      innerInput.setAttribute('role', 'spinbutton');\n      innerInput.setAttribute('aria-valuemax', this.max);\n      innerInput.setAttribute('aria-valuemin', this.min);\n      innerInput.setAttribute('aria-valuenow', this.currentValue);\n      innerInput.setAttribute('aria-disabled', this.inputNumberDisabled);\n    },\n    updated() {\n      if (!this.$refs || !this.$refs.input) return;\n      const innerInput = this.$refs.input.$refs.input;\n      innerInput.setAttribute('aria-valuenow', this.currentValue);\n    }\n  };\n</script>\n"],"sourceRoot":"node_modules/element-ui/packages/input-number/src"}]}